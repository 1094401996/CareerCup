package binarytree;

public class BinaryTree {
	private Node root;
	
	
	public BinaryTree(){
		
	}
	public BinaryTree(int[]arr){
		initTree(arr);
	}
	/**
	 * 初始化二叉树
	 */
    public void initTree(int []arr){
    	if (arr !=null){
    		root = new Node(arr[0]);
    		
    		Node p ;// 相当与遍历指针
    		Node node;//子节点
    		for (int i = 1; i <arr.length; i++){
    			p = root;
    			node = new Node(arr[i]);
    			while(true){
    				if(arr[i] <= p.getElement()){
    					if(p.getLeft() == null){
    						p.setLeft(node);
    						break;
    					}else{
    						p = p.getLeft();
    					}
    				}else{
    					if(p.getRight() == null){
    						p.setRight(node);
    						break;
    					}else{
    						p = p.getRight();
    					}
    				}
    			}
    			
    		}
    	}
    }
    
    public Node findNode(int element){
    	Node p = root;
    	while(p != null){
    		if(p.getElement() == element){
    			break;
    		}else{
    			if(p.getElement() > element){
    				p = p.getLeft();
    			}else{
    				p = p.getRight();
    			}
    		}
    	}
    	return p;
    }
    public Node getRoot(){
    	return root;
    }
    public void preorder(Node p ){
    	 if (p == null)
  		   return ;
    		System.out.print(p.getElement() + " ");
    		preorder(p.getLeft());
    		preorder(p.getRight());
    	
    }
    public void inorder(Node p){
    	   if (p == null)
    		   return ;
    		inorder(p.getLeft());
    		System.out.print(p.getElement() + " ");
    		inorder(p.getRight());
    	}
 
    public void postorder(Node p ){
    	 if (p == null)
  		   return ;
    		postorder(p.getLeft());
    		postorder(p.getRight());
    		System.out.print(p.getElement() + " ");
    	

    }
    
    public static void main(String[]args){
    	int [] data = {1,3,2,5,4,8,6};
    	BinaryTree mytree = new BinaryTree(data);
    	mytree.inorder(mytree.getRoot());
    	System.out.println();
    	mytree.preorder(mytree.getRoot());
    	System.out.println();
    	mytree.postorder(mytree.getRoot());

    }
    
    
    
}
