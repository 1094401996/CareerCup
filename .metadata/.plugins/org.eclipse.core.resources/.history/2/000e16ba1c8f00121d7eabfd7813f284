package binarytree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class BinaryTree {
	private Node root;
	

	public BinaryTree(int[]arr){
		initTree(arr);
	}
	public BinaryTree(int[]arr,boolean a){
		root = buildMinBST(arr);
	}
	
	
	/**
	 * 初始化二叉树
	 */
    public void initTree(int []arr){
    	if (arr !=null){
    		root = new Node(arr[0]);
    		
    		Node p ;// 相当与遍历指针
    		Node node;//子节点
    		for (int i = 1; i <arr.length; i++){
    			p = root;
    			node = new Node(arr[i]);
    			while(true){
    				if(arr[i] <= p.getElement()){
    					if(p.getLeft() == null){
    						p.setLeft(node);
    						break;
    					}else{
    						p = p.getLeft();
    					}
    				}else{
    					if(p.getRight() == null){
    						p.setRight(node);
    						break;
    					}else{
    						p = p.getRight();
    					}
    				}
    			}
    			
    		}
    	}
    }

    private Node buildMinBST(int[]arr){
		return  creatMinBST(arr,0 , arr.length - 1);
	}
	private Node creatMinBST(int[]arr,int left, int right){
			if(left > right){
				return null;
			}
			int mid = (left + right)/2;
			Node n = new Node(arr[mid]);
			n.setLeft(creatMinBST(arr,left,mid - 1));
			n.setRight(creatMinBST(arr,mid + 1,right));
			return n;
		
	}
    public Node findNode(int element){
    	Node p = root;
    	while(p != null){
    		if(p.getElement() == element){
    			break;
    		}else{
    			if(p.getElement() > element){
    				p = p.getLeft();
    			}else{
    				p = p.getRight();
    			}
    		}
    	}
    	return p;
    }
    public Node getRoot(){
    	return root;
    }
    //先序遍历
    public void preorder(Node p ){
    	 if (p == null)
  		   return ;
    		System.out.print(p.getElement() + " ");
    		preorder(p.getLeft());
    		preorder(p.getRight());
    	
    }
    //中序遍历
    public void inorder(Node p){
    	   if (p == null)
    		   return ;
    		inorder(p.getLeft());
    		System.out.print(p.getElement() + " ");
    		inorder(p.getRight());
    	}
    //后序遍历
    
    public void postorder(Node p ){
    	 if (p == null)
  		   return ;
    		postorder(p.getLeft());
    		postorder(p.getRight());
    		System.out.print(p.getElement() + " ");
    	

    }
    //层次遍历
    public void levelorder(Node p){
    	if(p == null)
    		return ;
    	Queue<Node> queue = new LinkedList<Node>();
    	queue.offer(p);
    	while(queue.size() > 0){
    		Node temp = queue.poll();
    		System.out.print(temp.getElement()+" ");
    		if(temp.getLeft()!=null){
    			queue.offer(temp.getLeft());
    		}
    		if(temp.getRight() != null){
    			queue.offer(temp.getRight());
    		}
    		
    	}
    	System.out.println();
    }
    //chapter 4.4 
    public ArrayList linlkedTree(Node p ){
    	if(p == null)
    		return null;
    	int H = getHeight(p);
    	ArrayList al = new ArrayList();
    	LinkedList[] array = new LinkedList[H + 1];
    	for(int i = 0 ; i < H + 1; i++){
    		array[i] = new LinkedList();
    	}
    	Queue<Node> queue = new LinkedList<Node>();
    	queue.offer(p);
    	while(queue.size() > 0){
    		Node temp = queue.poll();
    		int h = getHeight(temp);
    	    array[h].add(temp.getElement());
    		if(temp.getLeft()!=null){
    			queue.offer(temp.getLeft());
    		}
    		if(temp.getRight() != null){
    			queue.offer(temp.getRight());
    		}
    		
    	}
    	return la;
    }
    public int getHeight(Node node){
    	if (node == null)
    		return -1;
    	return Math.max(getHeight(node.getLeft()),getHeight(node.getRight())) + 1;
    }
    
    public boolean isBalanced1 (Node root){
    	if (root == null)
    		return true;
    	int heightDiff = Math.abs(getHeight(root.getLeft()) - getHeight(root.getRight()));
    	if (heightDiff > 1){
    		return false;
    	}else{
    		return isBalanced1(root.getLeft()) && isBalanced1(root.getRight());
    	}
  
    }
    
    private int checkHeight(Node root){
    	if(root == null)
    		return -1;
    	int leftHeight = checkHeight(root.getLeft());
    	if(leftHeight == -2){
    		return -2;
    	}
        int rightHeight = checkHeight(root.getRight());
        if (rightHeight == -2){
        	return -2;
        }
        int heightDiff = Math.abs(leftHeight - rightHeight);
        if (heightDiff > 1){
        	return -2;
        }else{
        	return Math.max(leftHeight,rightHeight) + 1;
        }
    }
    public boolean isBalanced2(Node root){
    	if (checkHeight(root) == -2){
    		return false;
    	}
    	return true;
    }
    
    
    
    
}
